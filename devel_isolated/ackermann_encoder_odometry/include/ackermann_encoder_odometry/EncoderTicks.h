// Generated by gencpp from file ackermann_encoder_odometry/EncoderTicks.msg
// DO NOT EDIT!


#ifndef ACKERMANN_ENCODER_ODOMETRY_MESSAGE_ENCODERTICKS_H
#define ACKERMANN_ENCODER_ODOMETRY_MESSAGE_ENCODERTICKS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ackermann_encoder_odometry
{
template <class ContainerAllocator>
struct EncoderTicks_
{
  typedef EncoderTicks_<ContainerAllocator> Type;

  EncoderTicks_()
    : left(0)
    , right(0)
    , steering(0)  {
    }
  EncoderTicks_(const ContainerAllocator& _alloc)
    : left(0)
    , right(0)
    , steering(0)  {
  (void)_alloc;
    }



   typedef int64_t _left_type;
  _left_type left;

   typedef int64_t _right_type;
  _right_type right;

   typedef int64_t _steering_type;
  _steering_type steering;





  typedef boost::shared_ptr< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> const> ConstPtr;

}; // struct EncoderTicks_

typedef ::ackermann_encoder_odometry::EncoderTicks_<std::allocator<void> > EncoderTicks;

typedef boost::shared_ptr< ::ackermann_encoder_odometry::EncoderTicks > EncoderTicksPtr;
typedef boost::shared_ptr< ::ackermann_encoder_odometry::EncoderTicks const> EncoderTicksConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator1> & lhs, const ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator2> & rhs)
{
  return lhs.left == rhs.left &&
    lhs.right == rhs.right &&
    lhs.steering == rhs.steering;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator1> & lhs, const ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ackermann_encoder_odometry

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4c5a794458df2ce8a4f30070d9589ef";
  }

  static const char* value(const ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4c5a794458df2ceULL;
  static const uint64_t static_value2 = 0x8a4f30070d9589efULL;
};

template<class ContainerAllocator>
struct DataType< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ackermann_encoder_odometry/EncoderTicks";
  }

  static const char* value(const ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 left\n"
"int64 right\n"
"int64 steering\n"
"\n"
;
  }

  static const char* value(const ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.steering);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncoderTicks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ackermann_encoder_odometry::EncoderTicks_<ContainerAllocator>& v)
  {
    s << indent << "left: ";
    Printer<int64_t>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<int64_t>::stream(s, indent + "  ", v.right);
    s << indent << "steering: ";
    Printer<int64_t>::stream(s, indent + "  ", v.steering);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACKERMANN_ENCODER_ODOMETRY_MESSAGE_ENCODERTICKS_H
